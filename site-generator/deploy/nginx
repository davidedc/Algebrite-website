#!/bin/bash

source "${BASH_SOURCE[0]}.cfg"

bold() {
    echo "$(tty -s && tput bold)$1$(tty -s && tput sgr0)"
}

error() {
    echo "$(tty -s && tput bold)$(tty -s && tput setaf 1)$1$(tty -s && tput sgr0)"
}

server_start() {
    server_stop

    sudo rm -rf /var/log/nginx/${site}
    sudo mkdir -p /var/log/nginx/${site}

    bold "apt-get update"
    if [ ! -f "/etc/apt/sources.list.d/nginx.list" ]; then
        echo "deb http://nginx.org/packages/ubuntu/ xenial nginx" | sudo tee /etc/apt/sources.list.d/nginx.list
        echo "deb-src http://nginx.org/packages/ubuntu/ xenial nginx" | sudo tee -a /etc/apt/sources.list.d/nginx.list
        sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys ABF5BD827BD9BF62
    fi
    sudo apt-get -qq update

    bold "apt-get install nginx"
    sudo apt-get -qq install --yes nginx

    bold "install nginx.service"
    sudo systemctl stop nginx.service

cat << EOF >> "${site}.conf"

log_format ${site}_format '[\$time_local] \$status \$request_uri';

server {
    listen 80;
EOF
    if test -n "${domain}" && sudo test -f "/etc/letsencrypt/live/${domain}/fullchain.pem" && sudo test -f "/etc/letsencrypt/live/${domain}/privkey.pem"; then
cat << EOF >> "${site}.conf"
    listen 443 ssl;
    ssl_certificate /etc/letsencrypt/live/${domain}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${domain}/privkey.pem;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
    server_name ${domain};
    return 301 https://www.${domain}\$request_uri;
}
server {
    listen 80;
    server_name www.${domain};
    return 301 https://\$host\$request_uri;
}
server {
    listen 443 ssl;
    ssl_certificate /etc/letsencrypt/live/${domain}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${domain}/privkey.pem;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
    server_name www.${domain};
EOF
    fi
cat << EOF >> "${site}.conf"
    gzip on; gzip_proxied any; gzip_min_length 1000; gzip_http_version 1.0; gzip_disable 'msie6'; gzip_vary on;
    gzip_types text/plain text/css text/javascript application/json application/atom+xml application/rss+xml;
    location / {
        root /var/www/${site};
        access_log /var/log/nginx/${site}/access.log ${site}_format;
        error_log /var/log/nginx/${site}/access.log;
        index index.html;
EOF
if [ -f "redirect.map" ]; then
    cat redirect.map | while read line; do
        read -ra columns <<< "$line"
        if [ ${columns[2]} == "301" ]; then
            echo "        rewrite ^${columns[0]}$ ${columns[1]} permanent;" >> "${site}.conf"
        fi
        if [ ${columns[2]} == "302" ]; then
            echo "        rewrite ^${columns[0]}$ ${columns[1]} redirect;" >> "${site}.conf"
        fi
    done
fi
cat << EOF >> "${site}.conf"
        error_page 404 /404.html;
    }
}
EOF
    if [ $(which nginx) ]; then
        nginx_conf=$(dirname $(nginx -V 2>&1 | grep -o '\-\-conf-path=\(.*conf\)' | cut -d '=' -f2))/conf.d
        if sudo test -f "${nginx_conf}/default.conf"; then
            sudo mv "${nginx_conf}/default.conf" "${nginx_conf}/default.conf.backup"
        fi
        sudo mv "${site}.conf" "${nginx_conf}/${site}.conf"
        sudo systemctl start "nginx.service"
        if [ $(systemctl is-active "nginx.service") != "active" ]; then
            sudo systemctl status "nginx.service" --no-pager --lines=25 --full
            error "ngnix.service is not active."
            return
        fi
    fi

    if sudo test -f "/etc/letsencrypt/live/${domain}/fullchain.pem" && sudo test -f "/etc/letsencrypt/live/${domain}/privkey.pem"; then
        bold "install ${site}-cert.service"
cat > "${site}-cert.service" << EOF
[Unit]
Description=${site}-cert.service
[Service]
Type=oneshot
WorkingDirectory=/opt/www/${site}
ExecStart=/bin/bash /opt/www/${site}/nginx server cert
User=$(whoami)
Group=$(whoami)
SyslogIdentifier=${site}-cert.service
EOF
        sudo cp "${site}-cert.service" "/etc/systemd/system/${site}-cert.service"
        rm "${site}-cert.service"

        bold "install ${site}-cert.timer"
cat > "${site}-cert.timer" << EOF
[Unit]
Description=${site}-cert.timer
[Timer]
OnCalendar=Mon *-*-* 00:00:00
Persistent=true
Unit=${site}-cert.service
[Install]
WantedBy=timers.target
EOF
        sudo cp "${site}-cert.timer" "/etc/systemd/system/${site}-cert.timer"
        rm "${site}-cert.timer"
        sudo systemctl enable "${site}-cert.timer"
        sudo systemctl start "${site}-cert.timer"
        if [ $(systemctl is-active "${site}-cert.timer") != "active" ]; then
            sudo systemctl status "${site}-cert.timer" --no-pager --lines=25 --full
            error "${site}-cert.timer is not active."
            return
        fi
    fi
}

server_stop() {
    if [ -f "/etc/systemd/system/${site}-cert.timer" ]; then
        bold "uninstall ${site}-cert.timer"
        if [ $(systemctl is-active "${site}-cert.timer") = "active" ]; then
            sudo systemctl stop "${site}-cert.timer"
            if [ $(systemctl is-active "${site}-cert.timer") != "inactive" ]; then
                sudo systemctl status "${site}-cert.timer" --no-pager --lines=25 --full
                error "${site}-cert.timer is not inactive."
                return
            fi
        fi
        if [ $(systemctl is-enabled ${site}-cert.timer) = "enabled" ]; then
            sudo systemctl disable "${site}-cert.timer"
            if [ $(systemctl is-enabled "${site}-cert.timer") != "disabled" ]; then
                sudo systemctl status "${site}-cert.timer" --no-pager --lines=25 --full
                error "${site}-cert.timer is not disabled."
                return
            fi
        fi
        sudo rm "/etc/systemd/system/${site}-cert.timer"
    fi
    if [ -f "/etc/systemd/system/${site}-cert.service" ]; then
        bold "uninstall ${site}-cert.service"
        sudo rm "/etc/systemd/system/${site}-cert.service"
    fi
    if [ $(which nginx) ]; then
        nginx_conf=$(dirname $(nginx -V 2>&1 | grep -o '\-\-conf-path=\(.*conf\)' | cut -d '=' -f2))/conf.d
        if [ -f "${nginx_conf}/${site}.conf" ]; then
            bold "uninstall nginx.service"
            sudo systemctl stop "nginx.service"
            if sudo test -f "${nginx_conf}/default.conf"; then
                sudo mv "${nginx_conf}/default.conf.backup" "${nginx_configuration}/default.conf"
            fi
            sudo rm "${nginx_conf}/${site}.conf"
            sudo systemctl start "nginx.service"
            if [ $(systemctl is-active "nginx.service") != "active" ]; then
                sudo systemctl status ngnix.service --no-pager --lines=25 --full
                error "ngnix.service is not active."
                return
            fi
        fi
    fi
}

server_cert() {
    if [ -z ${domain} ] || [ -z ${email} ]; then
        error "Update 'domain' and 'email' in '${BASH_SOURCE[0]}'."
        return
    fi

    bold "apt-get install letsencrypt"
    sudo apt-get -qq update
    sudo apt-get -qq install --yes letsencrypt

    pushd /var/www/${site} > /dev/null
    sudo mkdir .well-known
    if sudo test -f "/etc/letsencrypt/live/${domain}/fullchain.pem" && sudo test -f "/etc/letsencrypt/live/${domain}/privkey.pem"; then
        bold "renew certificate"
        sudo letsencrypt renew
    else
        bold "create certificate"
        sudo mkdir -p .well-known/acme-challenge
        sudo letsencrypt certonly --webroot -w $(pwd) -d ${domain} -d www.${domain} -d --agree-tos --email ${email}
        sudo rm letsencrypt.log
    fi
    sudo rm -R .well-known
    popd > /dev/null

    bold "reload nginx.service"
    sudo systemctl stop "nginx.service"
    sudo systemctl start "nginx.service"
    if [ $(systemctl is-active "nginx.service") != "active" ]; then
        sudo systemctl status "nginx.service" --no-pager --lines=25 --full
        error "nginx.service is not active."
    fi
}

server_log() {
    cat /var/log/nginx/${site}/access.log
}

server_deploy() {
    sudo rm -rf /var/www/${site}/*
    sudo mkdir -p /var/www/${site}
    sudo cp -R build/${generator}/* /var/www/${site}/
    sudo rm -rf /opt/www/${site}/*

    sudo mkdir -p /opt/www/${site}
    sudo cp deploy/nginx /opt/www/${site}/
    sudo cp deploy/nginx.cfg /opt/www/${site}/
    sudo cp redirect.map /opt/www/${site}/
}

deploy() {
    bold "archive"
    target=$(mktemp -d)
    pushd build > /dev/null
    zip ${target}/${site}-build.zip -r *
    popd > /dev/null
    zip --junk-paths ${target}/${site}-admin.zip redirect.map deploy/nginx deploy/nginx.cfg
    bold "secure copy"
    scp -i ${identity} -r ${target}/${site}-build.zip ${target}/${site}-admin.zip ${user}@${server}:~
    bold "server stop"
    ssh -i ${identity} ${user}@${server} -tq -o "BatchMode yes" " \
        [ -f /opt/www/${site}/nginx ] && cd /opt/www/${site} && sudo ./nginx server stop"
    bold "server deploy"
    ssh -i ${identity} ${user}@${server} -tq -o "BatchMode yes" " \
        sudo rm -rf /var/www/${site}/* /opt/www/${site}/* && \
        sudo mkdir -p /var/www/${site} /opt/www/${site} && \
        sudo unzip ${site}-build.zip -d /var/www/${site} && \
        sudo unzip ${site}-admin.zip -d /opt/www/${site} && \
        rm ~/${site}-build.zip && rm ~/${site}-admin.zip && \
        cd /opt/www/${site} && sudo ./nginx server start"
    rm -rf ${target}
}

log() {
    ssh -i ${identity} ${user}@${server} -tq -o "BatchMode yes" "cd /opt/www/${site} && /opt/www/${site}/nginx server log"
}

console() {
    ssh -i ${identity} ${user}@${server} -t "cd /opt/www/${site} && exec bash -l"
}

server() {
    command="$1"
    shift
    case "${command}" in
        "start") server_start;;
        "stop") server_stop;;
        "cert") server_cert;;
        "pull") server_pull;;
        "deploy") server_deploy;;
        "log") server_log;;
        *) ;;
    esac
}

command="$1"
shift
case "${command}" in
    "deploy") deploy $@;;
    "log") log;;
    "console") console;;
    "server") server $@;;
    *) ;;
esac
